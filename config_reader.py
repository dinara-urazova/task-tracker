from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import SecretStr
"""
библиотека Pydantic используется для управления конфигурацией приложения на основе переменных окружения. 
Pydantic обеспечивает валидацию данных на основе аннотаций типов. Когда вы определяете атрибуты в классе Settings с типами, такими как str и SecretStr, Pydantic автоматически проверяет, что загруженные значения соответствуют указанным типам. Если значение не соответствует ожидаемому типу, будет выполняться исключение, что позволяет вам быстро выявлять ошибки конфигурации.

BaseSettings: это базовый класс Pydantic, который позволяет создавать классы для конфигурации, загружая значения из переменных окружения или файлов. 
BaseSettings предоставляет механизм для автоматической загрузки значений конфигурации из переменных окружения и файлов, таких как .env. Когда вы наследуете от BaseSettings, ваш класс получает все методы и свойства, необходимые для этой автоматизации. Это позволяет вам не писать дополнительный код для загрузки и валидации конфигурационных данных.

SettingsConfigDict: это специальный класс, который используется для настройки поведения BaseSettings. 

SecretStr: это тип данных Pydantic, который позволяет хранить секретные строки (например, пароли) и скрывать их при выводе.
"""


class Settings(BaseSettings):
    """
    Здесь мы определяем класс Settings, который наследует от BaseSettings. Внутри класса мы объявляем атрибуты, которые будут загружены из переменных окружения.

    Каждый атрибут имеет тип данных, который указывает, какого типа значение ожидается:

    str: обычная строка.

    SecretStr: строка, которая будет храниться как секрет (например, пароль).

    """
    secret_key: str
    postgresql_database: str
    postgresql_username: str
    postgresql_password: SecretStr
    postgresql_hostname: str
    postgresql_port: str

    model_config = SettingsConfigDict(env_file=".env")
    """
    Наследование от BaseSettings позволяет вам использовать SettingsConfigDict для настройки поведения вашего класса. Например, вы можете указать, из какого файла загружать переменные окружения, что делает ваш код более гибким и настраиваемым.

    Здесь мы указываем, что Pydantic должен загружать значения из файла .env, если он существует. Это позволяет удобно управлять конфигурацией приложения, не хардкодя значения в коде.

    """



env_config = Settings()
"""
В этой строке мы создаем экземпляр класса Settings. При создании экземпляра Pydantic автоматически загружает значения из переменных окружения и файла .env, если они указаны, и инициализирует атрибуты класса соответствующими значениями.

Заключение

Таким образом, конструкция позволяет удобно управлять конфигурацией приложения, загружая значения из переменных окружения и скрывая секретные данные. Это особенно полезно для приложений, которые требуют конфиденциальной информации, такой как пароли и ключи доступа, и позволяет легко изменять конфигурацию без изменения кода.

Наследование от BaseSettings в классе Settings позволяет вам использовать мощные возможности Pydantic для управления конфигурацией приложения, включая автоматическую загрузку, валидацию данных и безопасное обращение с секретами. Это значительно упрощает разработку и повышает надежность вашего кода.

"""
